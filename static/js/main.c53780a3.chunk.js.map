{"version":3,"sources":["utils/swap.js","utils/bubble.js","utils/insertion.js","utils/selection.js","utils/merge.js","utils/quick.js","utils/heap.js","components/main.js","App.js","index.js"],"names":["swap","arr","left","right","temp","component","elements","a","i","length","j","setState","Promise","resolve","setTimeout","state","speed","document","querySelector","style","display","bubbleSort","current","insertionSort","min","selectionSort","mergeSort","mid","parseInt","merge","n1","n2","leftArr","Array","rightArr","k","quickSort","partition","pivot","heapSort","Math","floor","heapify","largest","Main","props","algorithm","size","from","random","finished","className","onChange","e","target","value","this","type","onClick","map","element","height","width","max","defaultValue","step","id","callMergeSort","callQuickSort","callHeapSort","alert","React","Component","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c53780a3.chunk.js","sourcesContent":["function swap(arr, left, right) {\n    var temp = arr[left];\n    arr[left] = arr[right];\n    arr[right] = temp;\n}\n\nexport default swap;","import swap from './swap.js'\n \nasync function bubbleSort(component, elements) { \n    let arr = elements;\n\n    for (let i = 0; i < arr.length-1; i++) {\n        for (let j = 0; j < arr.length-i-1; j++) {\n            if (arr[j] > arr[j+1])\n                swap(arr,j,j+1);\n                \n            component.setState({ elements: arr })\n            await new Promise((resolve) =>\n                setTimeout(() => { resolve() }, component.state.speed )\n            );\n        }   \n    }\n\n    document.querySelector('.completed').style.display = 'flex';\n}\nexport default bubbleSort;\n\n","import swap from './swap.js'\n\nasync function insertionSort(component, elements) {\n    let arr = elements;\n  \n    for (let i = 1; i < arr.length; ++i) {\n        let current = arr[i];\n        let j = i-1;\n  \n        while ((j > -1) && (current < arr[j])) {\n          swap(arr, j, j+1);\n          j--;\n\n          component.setState({ elements: arr })\n\n          await new Promise((resolve) =>\n            setTimeout(() => { resolve() }, component.state.speed )\n          );\n        }\n\n      arr[j+1] = current;\n    }\n\n    document.querySelector('.completed').style.display = 'flex';\n    return arr;\n}\n\nexport default insertionSort;","import swap from './swap.js'\n\nasync function selectionSort(component, elements) {\n    let arr = elements;\n  \n    for (let i = 0; i < arr.length; i++)  {\n        let min = i;\n  \n        for (let j = i+1; j < arr.length; j++) {\n          if (arr[j] < arr[min])\n            min = j;\n        \n            await new Promise((resolve) =>\n                setTimeout(() => { resolve() }, component.state.speed )\n            );\n        }\n\n        swap(arr, min, i);\n        component.setState({ elements: arr })\n    }\n\n    document.querySelector('.completed').style.display = 'flex';\n    return arr;\n}\n\nexport default selectionSort;","export default async function callMergeSort(component, elements) {\n    let arr = elements;\n    await mergeSort(component, arr, 0, arr.length - 1);\n    document.querySelector('.completed').style.display = 'flex';\n    return arr;\n}\n\nasync function mergeSort(component, arr, left, right) {\n    if(left < right) {\n        let mid = left + parseInt((right - left) / 2);\n  \n        await mergeSort(component, arr, left, mid);\n        await mergeSort(component, arr, mid + 1, right);\n        await merge(component, arr, left, mid, right);\n\n        component.setState({ elements: arr })\n\n        await new Promise((resolve) =>\n          setTimeout(() => { resolve() }, component.state.speed )\n        );\n    }\n}\n\nasync function merge(component, arr, left, mid, right) {\n    let n1 = mid - left + 1;\n    let n2 = right - mid;\n\n    let leftArr  = new Array(n1);\n    let rightArr = new Array(n2);\n\n    for (let i = 0; i < n1; i++)\n      leftArr[i] = arr[left + i];\n\n    for (let j = 0; j < n2; j++)\n      rightArr[j] = arr[mid + 1 + j];\n\n    let i = 0, j = 0, k = left;\n\n    while (i < n1 && j < n2) {\n      if (leftArr[i] <= rightArr[j]) {\n          arr[k] = leftArr[i];\n          i++;\n      } else {\n          arr[k] = rightArr[j];\n          j++;\n      }\n      k++;\n\n      component.setState({ elements: arr })\n      await new Promise((resolve) =>\n        setTimeout(() => { resolve() }, component.state.speed )\n      );\n    }\n\n    while (i < n1) {\n      arr[k] = leftArr[i];\n      i++;\n      k++;\n    }\n\n    while (j < n2) {\n      arr[k] = rightArr[j];\n      j++;\n      k++;\n    }\n}","import swap from './swap.js'\n\nexport default async function callQuickSort(component, elements) {\n    let arr = elements;\n    await quickSort(component, arr, 0, arr.length-1);\n    document.querySelector('.completed').style.display = 'flex';\n    return arr;\n}\n\nasync function quickSort(component, arr, left, right) {\n    if (left < right) {\n        let pivot = await partition(component, arr, left, right); \n\n        await quickSort(component, arr, left, pivot - 1);\n        await quickSort(component, arr, pivot + 1, right);\n\n        component.setState({ elements: arr })\n        await new Promise((resolve) =>\n            setTimeout(() => { resolve() }, component.state.speed )\n        );\n      }\n  }\n\nasync function partition(component, arr, left, right) {\n    let pivot = arr[right];\n    let i = (left - 1);\n  \n    for (let j = left; j <= right- 1; ++j) {  \n        if (arr[j] < pivot) {\n            i++;\n            swap(arr, i, j);\n        }    \n\n        component.setState({ elements: arr })\n        await new Promise((resolve) =>\n            setTimeout(() => { resolve() }, component.state.speed )\n        );\n    }\n\n    swap(arr, i+1, right);\n\n    component.setState({ elements: arr })\n    await new Promise((resolve) =>\n        setTimeout(() => { resolve() }, component.state.speed )\n    );\n    return (i + 1);\n}","import swap from './swap.js'\n\nexport default async function callHeapSort(component, elements) {\n    let arr = elements;\n    await heapSort(component, arr);\n    document.querySelector('.completed').style.display = 'flex';\n    return arr;\n}\n\nasync function heapSort(component, arr) {  \n    for (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--) {\n      heapify(component, arr, arr.length, i);\n\n      component.setState({ elements: arr })\n      await new Promise((resolve) =>\n          setTimeout(() => { resolve() }, component.state.speed )\n      );\n    }\n  \n    for (let i = arr.length - 1; i > 0; --i) {\n      swap(arr, 0, i);\n      heapify(component, arr, i, 0);\n\n      component.setState({ elements: arr })\n      await new Promise((resolve) =>\n          setTimeout(() => { resolve() }, component.state.speed )\n      );\n    }\n  }\n\nfunction heapify(component, arr, length, i) {\n    var largest = i;\n    var left    = 2 * i + 1;\n    var right   = 2 * i + 2;\n  \n    if (left < length && arr[left] > arr[largest])\n      largest = left;\n  \n    if (right < length && arr[right] > arr[largest])\n      largest = right;\n  \n    if (largest !== i) {\n      swap(arr, i, largest);\n      heapify(component, arr, length, largest);\n    }\n}","import React from 'react';\nimport bubbleSort from '../utils/bubble.js'\nimport insertionSort from '../utils/insertion.js'\nimport selectionSort from '../utils/selection.js'\nimport callMergeSort from '../utils/merge.js'\nimport callQuickSort from '../utils/quick.js'\nimport callHeapSort from '../utils/heap.js'\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { \n            algorithm: \"\",\n            size: 0,\n            elements: Array.from({length: 50}, () => (Math.random() * 90) + 10),\n            speed: 250,\n            finished: false\n        };\n    }   \n\n    render() {\n        return (\n            <div className='Main'>\n                <header>\n                    <h1>Sorting Visualizer</h1>\n\n                    <select onChange={(e) => { \n                        this.setState({algorithm : e.target.value})\n                    }}> \n                        <option value=''>Algorithm</option>\n                        <option value='Bubble Sort'>Bubble Sort</option>\n                        <option value='Selection Sort'>Selection Sort</option>                        \n                        <option value='Insertion Sort'>Insertion Sort</option>                       \n                        <option value='Merge Sort'>Merge Sort</option>                        \n                        <option value='Quick Sort'>Quick Sort</option>                        \n                        <option value='Heap Sort'>Heap Sort</option>                    \n                    </select>\n\n                    <i className=\"fas fa-chevron-down\"></i>\n                </header>\n                \n                <main>\n                    <div className='completed'>\n                        <p>{this.state.algorithm} Completed</p>\n                         <input type='button' value='Reset' className='reset-button' onClick={() => {\n                            document.querySelector('.completed').style.display = 'none';\n                            let size = this.state.elements.length;\n                            this.setState({\n                                elements: Array.from({length: size}, () => (Math.random() * 90) + 10)  \n                            }\n                            );\n                         }}/>\n                    </div>\n\n                    <div className='elements'> {\n                        this.state.elements.map((element, i) => \n                            <div className = 'element' \n                                 style = {{ height: element + '%', width: 100 / this.state.elements.length + '%' }} \n                                 key = {i}>        \n                            </div>\n                        )}\n                    </div>\n\n                    <div className='control-panel'>\n                        <h4>Size of Array</h4>\n                        <input  type='range' min='5' max='95' defaultValue='50' \n                                step='5' className='size range' id='size'\n                                onChange={(e) => { \n                                    this.setState({\n                                        elements: Array.from({length: e.target.value}, () => (Math.random() * 90) + 10)  \n                                    });\n                                 }}\n                        />\n                        \n                        <h4>Speed of Process</h4> \n                        <input  type='range' min='10' max='490' defaultValue='250' \n                                step='5' className='speed range'id='speed'\n                                onChange={(e) => { \n                                    this.setState({speed: e.target.value})\n                                }}\n                        />\n                        \n                        <input  type='button' className='button' value='sort' onClick={() => {\n                                switch(this.state.algorithm) {\n                                    case 'Bubble Sort': \n                                        bubbleSort(this, this.state.elements, this.state.speed);\n                                        break;\n\n                                    case 'Selection Sort': \n                                        selectionSort(this, this.state.elements, this.state.speed);\n                                        break;\n\n                                    case 'Insertion Sort': \n                                        insertionSort(this, this.state.elements, this.state.speed);\n                                        break;\n                                        \n                                    case 'Merge Sort': \n                                        callMergeSort(this, this.state.elements, this.state.speed);\n                                        break;\n\n                                    case 'Quick Sort': \n                                        callQuickSort(this, this.state.elements, this.state.speed);\n                                        break;\n\n                                    case 'Heap Sort': \n                                        callHeapSort(this, this.state.elements, this.state.speed);\n                                        break;\n\n                                    default: alert('please select a sorting algorithm') \n                                }\n                            }}\n                        />\n                    </div>\n                </main>\n            </div>\n        )\n    }\n}\n\nexport default Main;","import React from 'react';\nimport Main from './components/main.js'\n\nimport './styles/App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js'\nimport './styles/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}